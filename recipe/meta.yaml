{% set name = "onnx" %}
{% set version = "1.7.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  git_url: "https://github.com/onnx/onnx.git"
  git_rev: v{{ version }}

build:
  number: 4
  string: h{{ PKG_HASH }}_py{{ python | replace(".", "") }}_pb{{ protobuf | replace(".*", "")}}_{{ PKG_BUILDNUM }}
  entry_points:
    - check-model = onnx.bin.checker:check_model
    - check-node = onnx.bin.checker:check_node
    - backend-test-tools = onnx.backend.test.cmd_tools:main

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    # Use pins to control cos6/cos7 match
    - libgcc-ng  {{ libgcc }}         # [x86_64 and c_compiler_version == "7.2.*"]
    - libstdcxx-ng  {{ libstdcxx }}   # [x86_64 and c_compiler_version == "7.2.*"]
    - cmake {{ cmake }}
    - make                # needed by cmake
    - libprotobuf {{ protobuf }}
  host:
    - python {{ python }}
    - pip
    - protobuf {{ protobuf }}
    - libprotobuf {{ protobuf }}
    - pytest-runner {{ pytest }}
    - ninja {{ ninja }}
    # Use pins to control cos6/cos7 match
    - libgcc-ng  {{ libgcc }}         # [x86_64 and c_compiler_version == "7.2.*"]
    - libstdcxx-ng  {{ libstdcxx }}   # [x86_64 and c_compiler_version == "7.2.*"]

  run:
    - python {{ python }}
    - protobuf {{ protobuf }}
    - libprotobuf {{ protobuf }}
    - numpy {{ numpy }}
    - six {{ six }}
    - typing-extensions {{ typing_extensions }}

test:
  imports:
    - onnx
  commands:
    - check-model --help
    - check-node --help
    - backend-test-tools --help

about:
  home: https://github.com/onnx/onnx/
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Open Neural Network Exchange library
  description: |
    Open Neural Network Exchange (ONNX) is the first step toward an open
    ecosystem that empowers AI developers to choose the right tools as their
    project evolves. ONNX provides an open source format for AI models. It
    defines an extensible computation graph model, as well as definitions of
    built-in operators and standard data types. Initially we focus on the
    capabilities needed for inferencing (evaluation).

extra:
  recipe-maintainers:
    - open-ce/open-ce-dev-team
